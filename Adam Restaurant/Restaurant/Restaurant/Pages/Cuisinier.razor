@page "/Cuisine"
@inject CommandeService CommandeService
@inject TableService TableService
@inject PlatService PlatService
@inject CommandeCaissierService CommandeCaissierService
  <style>
	* {
		transition: .3s ease-in-out;
		font-family: 'Montserrat', sans-serif;
		margin: 0;
		box-sizing: border-box;
	}

	body {
		font-family: Montserrat;
		position: fixed;
		padding: 0;
		margin: 0;
		background-color: #F5F5F5;
		overflow: hidden;
	}
	  .m{
		  width:100vw;
		  height:100vh;
		  overflow-x:hidden;
		  overflow-y:hidden;
		  padding:0.5em 2em;
	  }

	.Headerr{
		display:flex;
		flex-direction:column;
		gap:1em;
		
	}
	.Headerr p{
			padding:0em 1em;
			font-size:1.2em;
	}

	/* Container for all commandes */
	.M {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 1.5em; /* Space between commandes */
		padding: 2em;
		background-color: #f9f9f9; /* Light background for the container */
	}

	/* Individual commande box */
	.cmd {
		background-color: #ffffff;
		padding: 1.5em;
		border-radius: 12px; /* Rounded corners */
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
		flex: 1 1 calc(25% - 2em); /* 4 commandes per row with gap */
		max-width: calc(25% - 1.5em); /* Ensures 4 per row */
		text-align: center;
		transition: transform 0.2s ease, box-shadow 0.2s ease; 

	}

		.cmd:hover {
			transform: translateY(-5px); /* Slight lift on hover */
			box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
		}

	/* Header row for plats and quantities */
	.plats-header {
		display: flex;
		justify-content: space-between;
		font-weight: bold;
		padding-bottom: 0.5em;
		margin-bottom: 0.5em;
		border-bottom: 2px solid #eee; /* Divider line */
	}

	/* Individual plat row */
	.plats-row {
		display: flex;
		justify-content: space-between;
		padding: 0.5em 0;
		border-bottom: 1px solid #eee; /* Light divider between rows */
	}

		.plats-row:last-child {
			border-bottom: none; /* Remove divider for the last row */
		}

	/* Button styling */
	.btnSucc {
		background-color: #28a745; /* Green color for success */
		color: white;
		border: none;
		padding: 0.75em 1.5em;
		border-radius: 6px;
		cursor: pointer;
		margin-top: 1em;
		font-size: 1em;
		transition: background-color 0.2s ease;
	}

		.btnSucc:hover {
			background-color: #218838; /* Darker green on hover */
		}

	/* No commandes message */
	h2 {
		text-align: center;
		width: 100%;
		color: #666; /* Subtle gray color */
		font-size: 1.5em;
		margin-top: 2em;
	}
	.btnSucc {
		background-color: #006622;
		border-color: #006622;
		color: #F2E8C6;
		padding:1em;
	}

		.btnSucc:hover {
			background-color: transparent;
			color: #006622;
			border:1px solid  #006622;
		}

	h4{
		margin:0em 0em 1em 0em;
		padding:0.5em;
		border-bottom:2px solid black;
		border-radius:10px;
	}
  </style>

<div class="m">
	<div class="Headerr">
		<h2>Bonjour Cuisinier</h2>
		<p>
			Voici votre tableau de bord. Ci-dessous, vous trouverez toutes les nouvelles commandes à préparer.
			Utilisez le bouton <button @onclick="Refresh">"Actualiser"</button> pour charger les nouvelles commandes.
			Une fois une commande prête, cliquez sur "Commande prête" pour informer le serveur. Bon travail !
		</p>
	</div>
	<div class="M">
		@if (commandes != null && commandes.Any())
		{
			foreach (var c in commandes)
			{
				if (c.platTables != null && c.platTables.Any())
				{
					<div class="cmd">
						<h4>Table @c.platTables[0].table.MatriculeTable</h4>
						<div class="plats-header">
							<b>Plat</b>
							<b>Quantité</b>
						</div>
						@foreach (var p in c.platTables)
						{
							<div class="plats-row">
								<p>@p.plat.NomPlat</p>
								<p>@p.Quantite</p>
							</div>
						}
						<button class="btnSucc" @onclick="()=>PlatPret(c)">Commande Prête</button>
					</div>
				}
			}
		}
		else
		{
			<h2>Aucune Nouvelle Commande n'est Disponible</h2>
		}
	</div>
</div>



@code{

	List<Commande> commandes;
	List<Table> tables;
	List<Plat> plats;
	protected override async Task OnInitializedAsync()
	{
		commandes = await CommandeService.GetCommandesAsync();
		plats = await PlatService.GetPlatsAsync();
		tables = await TableService.GetTablesAsync();
	}

	public async Task Refresh()
	{
		commandes = await CommandeService.GetCommandesAsync();
		plats = await PlatService.GetPlatsAsync();
		tables = await TableService.GetTablesAsync();
	}

	public async Task PlatPret(Commande c)
	{
		CommandeCaissier cc = new CommandeCaissier
			{
				table = c.platTables[0].table,
				Total = c.TotalCommande
			};
		await CommandeCaissierService.CreateCommandeCaissierAsync(cc);
		await CommandeService.DeleteCommandeAsync(c.Id);
		commandes = await CommandeService.GetCommandesAsync();
		StateHasChanged();
	}
}