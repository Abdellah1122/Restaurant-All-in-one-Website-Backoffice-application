@page "/Order"
@using System.Text.Json
@inject PlatService PlatService
@inject CategoriePlatService CategoriePlatService
@inject TableService TableService
@inject PlatTableService PlatTableService
@inject NavigationManager navigation
@inject CommandeState CommandeState
@inject CommandeService CommandeService

<style>
    * {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: 'Montserrat', sans-serif;
    margin: 0;
    box-sizing: border-box;
}

body {
    background-color: #eee;
    overflow-x: hidden;
    color: #800000;
    line-height: 1.6;
    min-height: 100vh;
}

</style>
<div class="m">
	<div class="NV">
        <p>Adam's</p>
		<button @onclick="GotoHome">Home Page</button>
	</div>
    <div class="h"> 
        @if (tableChoisis != null)
        {
            <h3>Table N°:@tableChoisis.MatriculeTable</h3>
        }
        <h5>
            Bienvenue Chez ADAM's!
            <br />
            Veuillez sélectionner les plats et boissons de votre choix, puis confirmez votre commande. Une fois validée, notre équipe s’occupera de la préparer et un serveur vous l’apportera dès qu’elle sera prête.
            <br />
            Bon appétit !
        </h5>
        <h2>Plats:</h2>
    </div>
	<div class="CatPlat">
        <div class="Categorie">
            @if (categoriePlats != null)
            {
                foreach(var cat in categoriePlats)
                {
                    <button @onclick="()=>CAT(cat.Id)" class="CatBTN">@cat.Nom</button>
                }
            }
            <button @onclick="ShowAll" class="CatBTN">Afficher Tout</button>
        </div>
        <div class="Plats">
            @if (filteredplats != null)
            {
                @foreach (var p in filteredplats)
                {
                    <div class="plat">
                        <img src="/ImagePlats/@p.ImagePlat" />
                        <p>@p.NomPlat</p>
                        <p>Prix: @p.PrixPlat DH</p>
                        <button class="MenuBtn" @onclick="()=>AddPlatToTable(p)">Ajouter</button>
                    </div>
                }
            }

        </div>
        <button @onclick="OpenConfirmModal" class="ConfirmBTN">Confirmer Votre Commande</button>
	</div>
	<Footer />
</div>
@if (_ConfirmModal)
{
    <div class="backdrop"></div>
    <div class="M3">
        <div class="btnss">
            <h2 >Table: T-01</h2>
            <button  class="btnFermer" @onclick="CloseConfirmModal">Fermer</button>
        </div>
        <div class="tablee">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Nom Plat</th>
                        <th scope="col">Image Plat</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Prix Plat</th>
                        <th scope="col">Total Plat</th>
                        <th scope="col">trash</th>
                    </tr>
                </thead>
                <tbody>
                    @if(CplatTables!=null && CplatTables.Any())
                    {
                        @foreach (var p in CplatTables)
                        {
                            <tr>
                                <td>@p.plat.NomPlat</td>
                                <td><img src="/ImagePlats/@p.plat.ImagePlat" /></td>
                                <td>@p.Quantite</td>
                                <td>@p.plat.PrixPlat DH</td>
                                <td>@p.Total DH</td>
                                <td><button class="btnFermer1" @onclick="()=>Delete(p.Id)"><i class="bi bi-trash-fill"></i></button></td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
        <div class="btnss">
            <button class="btnSucc" @onclick="OpenConfirmC">Confirmer</button>
            <button class="btnFermer" @onclick="Annuler">Annuler</button>
        </div>
    </div>
}
@if (_confirmConfirm)
{
    <div class="backdrop"></div>
    <div class="M2">
        <div class="btnss">
            <h2>Confirmation pour table : @tableChoisis.MatriculeTable</h2>
        </div>
        <p>
            Votre commande totalise @total MAD.
            <br />
            Confirmez ou ajoutez d’autres plats.
        </p>
        <div class="btnss">
            <button class="btnSucc" @onclick="Save">Confirmer</button>
            <button class="btnFermer" @onclick="CloseConfirmC">Fermer</button>
        </div>
    </div>
}
@if (_DangerModal)
{
    <div class="backdrop"></div>
    <div class="M2">
        <div class="btnss">
            <h2>Une erreur est survenue.</h2>
        </div>
        <p>
            Veuillez ajouter des plats à votre commande avant de procéder.
        </p>
        <div class="btnss">
            
            <button class="btnFermer" @onclick="CloseDangModal">Fermer</button>
        </div>
    </div>
}
@code {
    List<Plat> plats;
    List<CategoriePlat> categoriePlats;
    List<Table> tables;
    List<Plat> filteredplats;
    List<PlatTable> platTables;
    List<PlatTable> CplatTables;
    Table tableChoisis;
    //
    double total = 0;
    //
    public bool _ConfirmModal = false;
    public bool _confirmConfirm = false;
    public bool _DangerModal = false;
    //
    public void CalculerTotal()
    {
        total = 0;
        foreach(var p in CplatTables)
        {
            total = total + p.Total;
        }
    }
    private async Task Save()
    {
        var totalCommande = CplatTables.Sum(pt => pt.Total);
       
        var commande = new Commande
            {
                platTables = CplatTables,
                TotalCommande = totalCommande
            };


        await CommandeService.CreateCommandeAsync(commande);
        await TableService.IncrementNbrFoisOccupeAsync(CplatTables[0].table.Id);
        CplatTables.Clear();
        CloseConfirmC();
        CloseConfirmModal();
        CloseDangModal();

    }

    public void OpenConfirmModal()
    {
        CplatTables = platTables.Where(x => x.table.Id == tableChoisis.Id).ToList();
        _ConfirmModal = true;
    }
    public void CloseConfirmModal()
    {
        _ConfirmModal = false;
    }
    //
    public void OpenDangModal()
    {
        _DangerModal = true;
    }
    public void CloseDangModal()
    {
        _DangerModal = false;
        _confirmConfirm = false;
        _ConfirmModal = false;
    }
    //
    public void OpenConfirmC()
    {
        if(CplatTables!=null && CplatTables.Any())
        {
            CalculerTotal();
            _confirmConfirm = true;
        }
        else
        {
            OpenDangModal();
        }

    }

    public void CloseConfirmC()
    {
        _confirmConfirm = false;
    }
    //
    protected override async Task OnInitializedAsync()
    {
        filteredplats = plats = await PlatService.GetPlatsAsync();
        tables = await TableService.GetTablesAsync();
        categoriePlats = await CategoriePlatService.GetCategoriePlatsAsync();
        tableChoisis = tables[19];
        platTables = await PlatTableService.GetPlatTablesAsync();

    }
    public void CAT(int id)
    {
        filteredplats = plats.Where(c => c.categorie.Id == id).ToList();
    }
    public void ShowAll()
    {
        filteredplats = plats;
    }

    public async Task AddPlatToTable(Plat platToAdd)
    {
        platTables = await PlatTableService.GetPlatTablesAsync();
        var existingPlatTable = platTables
            .FirstOrDefault(p => p.table.Id == tableChoisis.Id && p.plat.Id == platToAdd.Id);

        if (existingPlatTable != null)
        {
            await PlatTableService.IncrementQuantityAsync(existingPlatTable.Id);
        }
        else
        {

            PlatTable newPlatTable = new PlatTable
                {
                    plat = platToAdd,
                    table = tableChoisis,
                    Quantite = 1,
                    Total = platToAdd.PrixPlat
                };

            await PlatTableService.CreatePlatTableAsync(newPlatTable);
            
        }
        await PlatService.IncrementNbrFoisCommandeAsync(platToAdd.Id);
        platTables = await PlatTableService.GetPlatTablesAsync();

    }
    public async Task Delete(int id)
    {
        await PlatTableService.DeletePlatTableAsync(id);
        platTables = await PlatTableService.GetPlatTablesAsync();
        CplatTables = platTables.Where(x => x.table.Id == tableChoisis.Id).ToList();
  
    }

    public async Task Annuler()
    {
        CplatTables.Clear();
        CloseConfirmModal();
    }
    public void GotoHome()
    {
        navigation.NavigateTo("/");
    }
}
